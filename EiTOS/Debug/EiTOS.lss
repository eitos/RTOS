
EiTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f7  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000176  00000000  00000000  000004a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022a  00000000  00000000  0000061f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dc  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ea       	ldi	r30, 0xA4	; 164
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 30       	cpi	r26, 0x04	; 4
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  b2:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <_Z6OsInitv>:
					"out __SREG__, r0				; so write the value to SREG and...				\n\t"	\
					"pop r0							; ...finally restore r0							\n\t"	\
	)

void OsInit(){
	TCCR0A = (1<<WGM01); // CTC
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	84 bd       	out	0x24, r24	; 36
	OCR0A  = 250-1; // 1 kHz
  be:	99 ef       	ldi	r25, 0xF9	; 249
  c0:	97 bd       	out	0x27, r25	; 39
	TCCR0B = (1<<CS00)|(1<<CS01); // presc 64
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);
  c6:	80 93 6e 00 	sts	0x006E, r24
	sei();	
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <__vector_16>:
}

ISR(TIMER0_COMPA_vect,ISR_NAKED){
	ContextSave();
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	f8 94       	cli
  d6:	1f 92       	push	r1
  d8:	2f 92       	push	r2
  da:	3f 92       	push	r3
  dc:	4f 92       	push	r4
  de:	5f 92       	push	r5
  e0:	6f 92       	push	r6
  e2:	7f 92       	push	r7
  e4:	8f 92       	push	r8
  e6:	9f 92       	push	r9
  e8:	af 92       	push	r10
  ea:	bf 92       	push	r11
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
 114:	11 24       	eor	r1, r1
 116:	a0 91 00 01 	lds	r26, 0x0100
 11a:	b0 91 01 01 	lds	r27, 0x0101
 11e:	0d b6       	in	r0, 0x3d	; 61
 120:	0d 92       	st	X+, r0
 122:	0e b6       	in	r0, 0x3e	; 62
 124:	0d 92       	st	X+, r0
	// some code - ex change tasks
	// ??warning - allocating too much local variables do can destroy stack of some taks??
	ContextRestore();
 126:	a0 91 00 01 	lds	r26, 0x0100
 12a:	b0 91 01 01 	lds	r27, 0x0101
 12e:	0d 90       	ld	r0, X+
 130:	0d be       	out	0x3d, r0	; 61
 132:	0d 90       	ld	r0, X+
 134:	0e be       	out	0x3e, r0	; 62
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	df 90       	pop	r13
 15c:	cf 90       	pop	r12
 15e:	bf 90       	pop	r11
 160:	af 90       	pop	r10
 162:	9f 90       	pop	r9
 164:	8f 90       	pop	r8
 166:	7f 90       	pop	r7
 168:	6f 90       	pop	r6
 16a:	5f 90       	pop	r5
 16c:	4f 90       	pop	r4
 16e:	3f 90       	pop	r3
 170:	2f 90       	pop	r2
 172:	1f 90       	pop	r1
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
	asm volatile("reti");
 17a:	18 95       	reti

0000017c <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "include/context_ISR.hpp"

int main(){
	DDRB = (1<<PB0);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	84 b9       	out	0x04, r24	; 4
	OsInit();
 180:	0e 94 5d 00 	call	0xba	; 0xba <_Z6OsInitv>
	while(1){
		PORTB ^= (1<<PB0);
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	85 b1       	in	r24, 0x05	; 5
 188:	89 27       	eor	r24, r25
 18a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	39 e6       	ldi	r19, 0x69	; 105
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	21 50       	subi	r18, 0x01	; 1
 194:	30 40       	sbci	r19, 0x00	; 0
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x16>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x20>
 19c:	00 00       	nop
 19e:	f3 cf       	rjmp	.-26     	; 0x186 <main+0xa>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
