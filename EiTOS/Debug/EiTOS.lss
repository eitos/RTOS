
EiTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002ce  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000366  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003af  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000231  00000000  00000000  000007a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026f  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003e  00000000  00000000  00000f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee ec       	ldi	r30, 0xCE	; 206
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a8 30       	cpi	r26, 0x08	; 8
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  b2:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <_Z12TaskAllocatePFvvEj>:
					"pop r0							; ...finally restore r0							\n\t"	\
	)

void TaskAllocate(TaskFunctionType Task, uint16_t TaskStackStart){
	uint8_t* RamPtr = (uint8_t*) TaskStackStart;
	*(RamPtr-RETI_ADDR_HI ) = ((uint16_t)Task)>>8;
  ba:	fb 01       	movw	r30, r22
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	90 83       	st	Z, r25
	*(RamPtr-RETI_ADDR_LOW) = ((uint16_t)Task);
  c0:	fb 01       	movw	r30, r22
  c2:	80 83       	st	Z, r24
	*(RamPtr-SREG_C) = (1<<7); // Set I-bit in order to have interrupts enabled
  c4:	33 97       	sbiw	r30, 0x03	; 3
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
	*(RamPtr-R0_C) = 0;
  ca:	31 96       	adiw	r30, 0x01	; 1
  cc:	10 82       	st	Z, r1
	*(RamPtr-R1_C) = 0;
  ce:	32 97       	sbiw	r30, 0x02	; 2
  d0:	10 82       	st	Z, r1
	*(RamPtr-R2_C) = 0;
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	10 82       	st	Z, r1
	*(RamPtr-R3_C) = 0;
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	10 82       	st	Z, r1
	*(RamPtr-R4_C) = 0;
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	10 82       	st	Z, r1
	*(RamPtr-R5_C) = 0;
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	10 82       	st	Z, r1
	*(RamPtr-R6_C) = 0;
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	10 82       	st	Z, r1
	*(RamPtr-R7_C) = 0;
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	10 82       	st	Z, r1
	*(RamPtr-R8_C) = 0;
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	10 82       	st	Z, r1
	*(RamPtr-R9_C) = 0;
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	10 82       	st	Z, r1
	*(RamPtr-R10_C) = 0;
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	10 82       	st	Z, r1
	*(RamPtr-R11_C) = 0;
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	10 82       	st	Z, r1
	*(RamPtr-R12_C) = 0;
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	10 82       	st	Z, r1
	*(RamPtr-R13_C) = 0;
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	10 82       	st	Z, r1
	*(RamPtr-R14_C) = 0;
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	10 82       	st	Z, r1
	*(RamPtr-R15_C) = 0;
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	10 82       	st	Z, r1
	*(RamPtr-R16_C) = 0;
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	10 82       	st	Z, r1
	*(RamPtr-R17_C) = 0;
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	10 82       	st	Z, r1
	*(RamPtr-R18_C) = 0;
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	10 82       	st	Z, r1
	*(RamPtr-R19_C) = 0;
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	10 82       	st	Z, r1
	*(RamPtr-R20_C) = 0;
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	10 82       	st	Z, r1
	*(RamPtr-R21_C) = 0;
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	10 82       	st	Z, r1
	*(RamPtr-R22_C) = 0;
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	10 82       	st	Z, r1
	*(RamPtr-R23_C) = 0;
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	10 82       	st	Z, r1
	*(RamPtr-R24_C) = 0;
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	10 82       	st	Z, r1
	*(RamPtr-R25_C) = 0;
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	10 82       	st	Z, r1
	*(RamPtr-R26_C) = 0;
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	10 82       	st	Z, r1
	*(RamPtr-R27_C) = 0;
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	10 82       	st	Z, r1
	*(RamPtr-R28_C) = 0;
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	10 82       	st	Z, r1
	*(RamPtr-R29_C) = 0;
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	10 82       	st	Z, r1
	*(RamPtr-R30_C) = 0;
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	10 82       	st	Z, r1
	*(RamPtr-R31_C) = 0;
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <_Z6OsInitv>:
}

void OsInit(){
	TCCR0A = (1<<WGM01); // CTC
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	84 bd       	out	0x24, r24	; 36
	OCR0A  = 250-1; // 1 kHz
 150:	99 ef       	ldi	r25, 0xF9	; 249
 152:	97 bd       	out	0x27, r25	; 39
	TCCR0B = (1<<CS00)|(1<<CS01); // presc 64
 154:	93 e0       	ldi	r25, 0x03	; 3
 156:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);
 158:	80 93 6e 00 	sts	0x006E, r24
	sei();	
 15c:	78 94       	sei
 15e:	08 95       	ret

00000160 <__vector_16>:
}

ISR(TIMER0_COMPA_vect,ISR_NAKED){
	ContextSave();
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	f8 94       	cli
 168:	1f 92       	push	r1
 16a:	2f 92       	push	r2
 16c:	3f 92       	push	r3
 16e:	4f 92       	push	r4
 170:	5f 92       	push	r5
 172:	6f 92       	push	r6
 174:	7f 92       	push	r7
 176:	8f 92       	push	r8
 178:	9f 92       	push	r9
 17a:	af 92       	push	r10
 17c:	bf 92       	push	r11
 17e:	cf 92       	push	r12
 180:	df 92       	push	r13
 182:	ef 92       	push	r14
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
 1a6:	11 24       	eor	r1, r1
 1a8:	a0 91 01 01 	lds	r26, 0x0101
 1ac:	b0 91 02 01 	lds	r27, 0x0102
 1b0:	0d b6       	in	r0, 0x3d	; 61
 1b2:	0d 92       	st	X+, r0
 1b4:	0e b6       	in	r0, 0x3e	; 62
 1b6:	0d 92       	st	X+, r0
	
	// TP ONLY BEGIN
	if(task_no_set==2){
 1b8:	80 91 00 01 	lds	r24, 0x0100
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	51 f4       	brne	.+20     	; 0x1d4 <__vector_16+0x74>
		TaskStack=0x1000-STACK_HEAP;
 1c0:	8d ed       	ldi	r24, 0xDD	; 221
 1c2:	9f e0       	ldi	r25, 0x0F	; 15
 1c4:	90 93 07 01 	sts	0x0107, r25
 1c8:	80 93 06 01 	sts	0x0106, r24
		task_no_set=1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 00 01 	sts	0x0100, r24
 1d2:	23 c0       	rjmp	.+70     	; 0x21a <__vector_16+0xba>
	}else if(task_no_set==1){
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	89 f4       	brne	.+34     	; 0x1fa <__vector_16+0x9a>
		ten_drugi=TaskStack;
 1d8:	80 91 06 01 	lds	r24, 0x0106
 1dc:	90 91 07 01 	lds	r25, 0x0107
 1e0:	90 93 05 01 	sts	0x0105, r25
 1e4:	80 93 04 01 	sts	0x0104, r24
		TaskStack=0x0F9C-STACK_HEAP;
 1e8:	89 e7       	ldi	r24, 0x79	; 121
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	90 93 07 01 	sts	0x0107, r25
 1f0:	80 93 06 01 	sts	0x0106, r24
		task_no_set=0;
 1f4:	10 92 00 01 	sts	0x0100, r1
 1f8:	10 c0       	rjmp	.+32     	; 0x21a <__vector_16+0xba>
	}else{
		uint16_t temp=TaskStack;
 1fa:	80 91 06 01 	lds	r24, 0x0106
 1fe:	90 91 07 01 	lds	r25, 0x0107
		TaskStack=ten_drugi;
 202:	20 91 04 01 	lds	r18, 0x0104
 206:	30 91 05 01 	lds	r19, 0x0105
 20a:	30 93 07 01 	sts	0x0107, r19
 20e:	20 93 06 01 	sts	0x0106, r18
		ten_drugi=temp;
 212:	90 93 05 01 	sts	0x0105, r25
 216:	80 93 04 01 	sts	0x0104, r24
	}
	// TP ONLY END
	ContextRestore();
 21a:	a0 91 01 01 	lds	r26, 0x0101
 21e:	b0 91 02 01 	lds	r27, 0x0102
 222:	0d 90       	ld	r0, X+
 224:	0d be       	out	0x3d, r0	; 61
 226:	0d 90       	ld	r0, X+
 228:	0e be       	out	0x3e, r0	; 62
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	7f 91       	pop	r23
 23c:	6f 91       	pop	r22
 23e:	5f 91       	pop	r21
 240:	4f 91       	pop	r20
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	9f 90       	pop	r9
 258:	8f 90       	pop	r8
 25a:	7f 90       	pop	r7
 25c:	6f 90       	pop	r6
 25e:	5f 90       	pop	r5
 260:	4f 90       	pop	r4
 262:	3f 90       	pop	r3
 264:	2f 90       	pop	r2
 266:	1f 90       	pop	r1
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
	asm volatile("reti");
 26e:	18 95       	reti

00000270 <_Z5Task1v>:
#include <util/delay.h>
#include "include/context_ISR.hpp"

 void Task1(){
	while(1){
		PORTB ^= (1<<PB2);
 270:	94 e0       	ldi	r25, 0x04	; 4
 272:	85 b1       	in	r24, 0x05	; 5
 274:	89 27       	eor	r24, r25
 276:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	31 ee       	ldi	r19, 0xE1	; 225
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	30 40       	sbci	r19, 0x00	; 0
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <_Z5Task1v+0xe>
 286:	00 c0       	rjmp	.+0      	; 0x288 <_Z5Task1v+0x18>
 288:	00 00       	nop
 28a:	f3 cf       	rjmp	.-26     	; 0x272 <_Z5Task1v+0x2>

0000028c <_Z5Task2v>:
	}
}

void Task2(){
	while(1){
		PORTB ^= (1<<PB1);
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	89 27       	eor	r24, r25
 292:	85 b9       	out	0x05, r24	; 5
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	33 ec       	ldi	r19, 0xC3	; 195
 298:	89 e0       	ldi	r24, 0x09	; 9
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	30 40       	sbci	r19, 0x00	; 0
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <_Z5Task2v+0xe>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <_Z5Task2v+0x18>
 2a4:	00 00       	nop
 2a6:	f3 cf       	rjmp	.-26     	; 0x28e <_Z5Task2v+0x2>

000002a8 <main>:
		_delay_ms(200);
	}
}

int main(){
	DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2);
 2a8:	87 e0       	ldi	r24, 0x07	; 7
 2aa:	84 b9       	out	0x04, r24	; 4
	
	TaskAllocate(&Task1,0x1000);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	70 e1       	ldi	r23, 0x10	; 16
 2b0:	88 e3       	ldi	r24, 0x38	; 56
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 5d 00 	call	0xba	; 0xba <_Z12TaskAllocatePFvvEj>
	TaskAllocate(&Task2,0x0F9C);
 2b8:	6c e9       	ldi	r22, 0x9C	; 156
 2ba:	7f e0       	ldi	r23, 0x0F	; 15
 2bc:	86 e4       	ldi	r24, 0x46	; 70
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 5d 00 	call	0xba	; 0xba <_Z12TaskAllocatePFvvEj>
	
	OsInit();
 2c4:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z6OsInitv>
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <main+0x20>

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
